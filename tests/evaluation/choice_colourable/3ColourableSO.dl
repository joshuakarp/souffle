// Verifies whether a derived node colouring (in node_colour) is a 3-colouring of the graph.
.decl colour(c:symbol)
.decl node(n:symbol)
.input node
.decl edge(x:symbol, y:symbol)
.input edge
.decl node_colour(node:symbol, colour:symbol)
.decl dNode_colour(node:symbol)
.decl lNode_colour(node:symbol, colour:symbol, ticker:number)
.decl choiceNode_colour(node:symbol, colour:symbol)

.decl cannot_colour()
.decl colourable()

//node("a").
//node("b").
//node("c").

//edge("a", "b").
//edge("a", "c").
//edge("b", "c").

colour("red").
colour("green").
colour("blue").

node_colour("aaaa","red").

edge(x,y) :- edge(y,x).
// Attempt to match a node with a colour: find any edges from this node, and ensure this node's
// colour is not the same as it's neighbour's.
node_colour(n,c) :- node(n), colour(c).
dNode_colour(n) :- node_colour(n,_).
lNode_colour(n,c,$) :- node_colour(n,c).
choiceNode_colour(n,c) :- dNode_colour(n), m = min a : {lNode_colour(n,_,a)}, lNode_colour(n,c,m).

cannot_colour() :- edge(x,y), choiceNode_colour(x,colour), choiceNode_colour(y,colour).
colourable() :- !cannot_colour().

.output colourable
